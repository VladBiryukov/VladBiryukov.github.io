{"version":3,"sources":["TemplateStoreContainer/styles.ts","TemplateStoreContainer/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","padding","spacing","textField","width","maxWidth","minWidth","minHeight","padded","margin","getObjKeySnakeCaseAndType","rawString","split","fieldSnakeCase","type","trim","toCamel","s","replace","$1","toUpperCase","renderMethodFromApi","arrayFieldWithTypes","Grid","container","direction","item","map","index","strSnakeCase","key","renderMethodToApi","TemplateStoreContainer","useState","selectValue","setSelectValue","classes","arrayFieldAsSnakeCaseWithType","filter","className","xs","TextareaAutosize","placeholder","value","onChange","e","target","style","userSelect","whiteSpace","justify","field","getStringObservableFieldWithType","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5eb238a6.chunk.js","sourcesContent":["import {\r\n    makeStyles, createStyles, Theme,\r\n} from '@material-ui/core/styles';\r\n\r\n\r\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        padding: theme.spacing(3)\r\n    },\r\n    textField: {\r\n        width: '80%',\r\n        maxWidth: '80%',\r\n        minWidth: '80%',\r\n        minHeight: '180px'\r\n    },\r\n    padded: {\r\n        margin: theme.spacing(1, 0)\r\n    }\r\n}));\r\n","import React, { useState } from 'react'\r\nimport { TextareaAutosize, Grid } from '@material-ui/core';\r\nimport { useStyles } from './styles';\r\n\r\nconst placeholder = 'api'\r\n\r\nconst ecamplaString = ` \r\nid: number,\r\ndate: string,\r\nfield_field: number | null,\r\narr_ids: number[],\r\n`;\r\n\r\nexport type ObjWithString = { [key: string]: string };\r\n\r\n// deleted_at: null | string => {deleted_at, type}\r\nfunction getObjKeySnakeCaseAndType(rawString: string): ObjWithString {\r\n  const [fieldSnakeCase, type] = rawString.split(':');\r\n  const result = { fieldSnakeCase: fieldSnakeCase?.trim() || '', type: type?.trim() || '' }\r\n  return result\r\n}\r\n// deleted_at => deletedAt\r\nconst toCamel = (s: string): string => {\r\n  return s.replace(/([-_][a-z])/ig, ($1) => {\r\n    return $1.toUpperCase()\r\n      .replace('-', '')\r\n      .replace('_', '');\r\n  });\r\n};\r\n// @observable\r\nexport function getStringObservableFieldWithType(field: string, type: string): string {\r\n  return `@observable ${field}: ${type};`\r\n}\r\n// {deleted_at, type}[]\r\nfunction parseStringToArrayObjKeyAndValue(rawString: string): ObjWithString[] {\r\n  const arrayRawStrings: string[] = rawString.split(',');\r\n  const arrayObjWithKeySnakeCaseAndType = arrayRawStrings.map(getObjKeySnakeCaseAndType).filter(item => !!item.type);\r\n  return arrayObjWithKeySnakeCaseAndType;\r\n}\r\n\r\nexport function getStrFieldItemForFromApi(strSnakeCase: string, type: string): string {\r\n  return `this.${toCamel(strSnakeCase)} = api.${strSnakeCase};`\r\n}\r\n\r\nexport function renderMethodFromApi(arrayFieldWithTypes: ObjWithString[]): JSX.Element {\r\n  return (\r\n    <Grid container direction='column'>\r\n      <Grid item>{`@action fromAPI(api) {`}</Grid>\r\n      {arrayFieldWithTypes.map(({ fieldSnakeCase, type }, index) => (\r\n        <Grid item key={index}>{getStrFieldItemForFromApi(fieldSnakeCase, type)}</Grid>\r\n      ))}\r\n      <Grid item>{`return this;`}</Grid>\r\n      <Grid item>{`}`}</Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport function getStrFieldItemForToApi(strSnakeCase: string): string {\r\n  return `${strSnakeCase}: this.${toCamel(strSnakeCase)},`\r\n}\r\n\r\nexport function renderMethodToApi(arrayFieldWithTypes: ObjWithString[]): JSX.Element {\r\n  return (\r\n    <Grid container direction='column'>\r\n      <Grid item>{`@action toApi() {`}</Grid>\r\n      <Grid item>{`return ({`}</Grid>\r\n      {arrayFieldWithTypes.map(({ fieldSnakeCase }, index) => (\r\n        <Grid item key={index}>{getStrFieldItemForToApi(fieldSnakeCase)}</Grid>\r\n      ))}\r\n      <Grid item>{`});`}</Grid>\r\n      <Grid item>{`}`}</Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\n\r\nconst TemplateStoreContainer = () => {\r\n  const [selectValue, setSelectValue] = useState<string>('')\r\n  const classes = useStyles();\r\n  const arrayFieldAsSnakeCaseWithType = parseStringToArrayObjKeyAndValue(selectValue)\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={2}>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <TextareaAutosize\r\n              placeholder={placeholder}\r\n              className={classes.textField}\r\n              value={selectValue}\r\n              onChange={(e) => setSelectValue(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n\r\n            <Grid container direction='column'>\r\n              <Grid item style={{ userSelect: 'none' }}>Пример</Grid>\r\n              <Grid item style={{ whiteSpace: 'pre' }}>{ecamplaString}</Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container direction='column' justify='flex-start'>\r\n          <Grid item className={classes.padded}>\r\n            {arrayFieldAsSnakeCaseWithType.map(({ fieldSnakeCase, type }, index) => (\r\n              <Grid container key={index}>\r\n                <Grid item>{getStringObservableFieldWithType(toCamel(fieldSnakeCase), type)}</Grid>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n          <Grid item className={classes.padded}>\r\n            {renderMethodFromApi(arrayFieldAsSnakeCaseWithType)}\r\n          </Grid>\r\n          <Grid item className={classes.padded}>\r\n            {renderMethodToApi(arrayFieldAsSnakeCaseWithType)}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TemplateStoreContainer","import React from 'react';\n\nimport './App.css';\nimport TemplateStoreContainer from './TemplateStoreContainer'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TemplateStoreContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}